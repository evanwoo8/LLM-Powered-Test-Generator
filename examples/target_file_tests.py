# Auto-generated by LLM TestGen
import pytest
from examples.target_file import word_frequencies, greet, fibonacci

from pytest import *
import word_frequencies as wf


def test_word_frequencies():
    assert word_frequencies('Hello world!', min_length=2) == {'hello': 1, 'world': 3}

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()
        words = text.lower().split()
        freqs = wf.word_frequencies(words, min_length=min(len(w) for w in words))
    assert len(freqs) == 3

    with open("test.txt", "r") as f:
        text = f.read()

import pytest
from target import greet, greet_with_error, greet_with_exception

# Define the function to be tested
greet = lambda name: greet(name)

# Test the function with a default argument
assert greet('John') == 'Hello, John!'

def test_default():
    # Use deterministic asserts
    assert greet() is None  # This will raise an exception

    def test_error():
        # Use markdown fences and no comments or docstrings
        assert greet(123) == 'Error: 123'

        def test_exception(e):
            # Use markdown fences and no comments or docstrings
            assert greet(123, e) is None

    # Test the function with a named test case
    @greet.name
    def test_hello():
        # Use deterministic asserts
        assert greet('John') == 'Hello, John!'

    @greet.error
    def test_invalid_argument():
        # Use markdown fences and no comments or docstrings
        assert greet(123) is None  # This will raise an exception

import pytest
from examples.target_file import add

def test_add():
    assert add(1, 2) == 3

def test_add_edge_case():
    with pytest.raises(ValueError):
        add("a", "b")

def test_add_error():
    with pytest.raises(TypeError):
        add([], {})


def fibonacci_test():
    """Test the function to check if it works correctly."""

    def test_fibonacci(self):
        """Test the function with a few cases."""

        # Test that the function returns the correct result for negative numbers.
        self.assertEqual(fibonacci(-1), -1)
        self.assertEqual(fibonacci(0), 0)
        self.assertEqual(fibonacci(2), 1)

    def test_memoized(self):
        """Test memoization with a function that returns the correct result."""

        # Test that the function correctly handles negative numbers and non-integer inputs.
        self.assertEqual(fibonacci(-3, False), -4)
        self.assertEqual(fibonacci(0, True), 1)

    def test_non_negative(self):
        """Test the function with a few cases."""

        # Test that the function correctly handles negative numbers and non-integer inputs.
        self.assertEqual(fibonacci(-2, False), -3)
        self.assertEqual(fibonacci(0, True), 1)

    def test_error_exception(self):
        """Test error/exception handling with a few cases."""

        # Test that the function raises an exception when it tries to call `fibonacci` without any arguments.
        self.assertRaises(ValueError, fibonacci)

if __name__ == '__main__':
    unittest.main()
